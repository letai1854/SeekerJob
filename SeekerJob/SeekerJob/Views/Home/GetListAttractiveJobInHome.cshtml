@*@using SeekerJob.Controllers
    @using SeekerJob.DataSystem
    @{
        var listjob = ViewData["listjobuser"] as List<SeekerJob.DTO.CombineJobUser>;
    }

    @foreach (var item in listjob)
    {
        var relativeTime = data.GetRelativeTime((DateTime)item.job.startday); // Or use item.startday, depending on your use case
        <div class="col-lg-4 col-md-6 col-sm-12 mb-4">
            <div class="job-card bg-white border p-3 d-flex align-items-center">
                <div class="job-card-image-wrapper position-relative">
                    <img src="~/ContentImage/images/@item.employer.image" alt="job-image" class="job-card-image">
                </div>
                <div class="job-card-content flex-grow-1 pl-4">
                    <a href="@ViewBag.metacontroller/@item.job.meta/@item.job.id" class="job-title text-dark font-weight-bold">
                        <h4 style="font-size: 15px">@item.job.title<span class="text-success job-duration" style="font-size: 13px">/ @relativeTime</span></h4>
                    </a>
                    <p class="job-address text-muted mb-2" style="font-size: 13px">@item.job.addressdetail</p>
                </div>
                <div class="job-card-right-content text-right">
                    @if (item.job.jobcategory == "Toàn thời gian")
                    {
                        <div class="job-category badge badge-fulltime fixed-width-badge" style="font-size: 11px; ">@item.job.jobcategory</div>

                    }
                    else if (item.job.jobcategory == "Bán thời gian")
                    {
                        <div class="job-category badge fixed-width-badge " style="font-size: 11px; background-color: coral; ">@item.job.jobcategory</div>

                    }
                    else if (item.job.jobcategory == "Tự do")
                    {
                        <div class="job-category badge fixed-width-badge" style="font-size: 11px; background-color: chartreuse; ">@item.job.jobcategory</div>

                    }
                    else
                    {
                        <div class="job-category badge fixed-width-badge" style="font-size: 11px; background-color:darkblue; ">@item.job.jobcategory</div>
                    }
                    <div class="job-salary text-dark font-weight-bold" style="font-size: 13px">$@item.job.offer <span class="text-success" style="font-size: 13px">/ Tháng</span></div>
                    <a href="@ViewBag.metacontroller/@item.job.meta/@item.job.id" class="job-browse text-primary font-weight-bold" style="font-size: 13px">Xem thêm</a>
                </div>
            </div>
        </div>
    }*@
@using SeekerJob.Controllers
@using SeekerJob.DataSystem
@{
    var listjob = ViewData["listjobuser"] as List<SeekerJob.DTO.CombineJobUser>;
    //var isPaginationCreated = ViewBag.TotalPages > 0;
    //Session["IsPaginationCreated"] = false;
    var isPaginationCreated = Session["IsPaginationCreated"] as bool? ?? false;

}

<!-- <div class="row" id="jobList">
    @Html.Partial("JobListPartial", listjob)
</div>

<div class="d-flex justify-content-center mt-4" style="margin-bottom:4px;">
    <div class="pagination" id="pagination">
        @for (int i = 1; i <= ViewBag.TotalPages; i++)
        {
            <button id="page-btn-@i" class="btn @(i == ViewBag.CurrentPage ? "btn-primary" : "btn-outline-primary") mx-1 page-btn" 
                    data-page="@i">@i</button>
        }
    </div>
</div>

<script>
$(document).ready(function() {
    $('#pagination').empty();
    var currentPage = @ViewBag.CurrentPage; // Thêm biến này để lấy trang hiện tại
    
    for(let i = 1; i <= @ViewBag.TotalPages; i++) {
        let buttonClass = i === currentPage ? 'btn-primary' : 'btn-outline-primary';
        let button = $('<button>')
            .attr('id', 'page-btn-' + i)
            .addClass('btn ' + buttonClass + ' mx-1 page-btn')
            .attr('data-page', i)
            .text(i);
        $('#pagination').append(button);
    }
    $(document).on('click', '.page-btn', function() {
        var page = $(this).data('page');

        loadJobs(page);
    });

    function loadJobs(page) {
        $.ajax({
            url: '@Url.Action("GetListAttractiveJobInHome", "Home")',
            type: 'GET',
            data: { page: page },
            success: function(result) {
                $('#jobList').html(result);
                // $('#pagination').empty();
                // for(let i = 1; i <= @ViewBag.TotalPages; i++) {
                //     let buttonClass = i === page ? 'btn-primary' : 'btn-outline-primary';
                //     let button = $('<button>')
                //         .attr('id', 'page-btn-' + i)
                //         .addClass('btn ' + buttonClass + ' mx-1 page-btn')
                //         .attr('data-page', i)
                //         .text(i);
                //     $('#pagination').append(button);
                // }
                updatePagination(page);
            },
            error: function(err) {
                console.error('Lỗi khi tải dữ liệu:', err);
            }
        });
    }

    function updatePagination(currentPage) {
        $('.page-btn').removeClass('btn-primary').addClass('btn-outline-primary');
        $('.page-btn[data-page="' + currentPage + '"]').removeClass('btn-outline-primary').addClass('btn-primary');
    }
});

    // function recreatePagination(currentPage, totalPages) {        
    //     // Tạo lại các nút phân trang mới
    //     $('#pagination').empty();
    //     if (isPaginationCreated) {
    //         for(let i = 1; i <= totalPages; i++) {
    //             let buttonClass = i === currentPage ? 'btn-primary' : 'btn-outline-primary';
    //             let button = $('<button>')
    //                 .attr('id', 'page-btn-' + i)
    //                 .addClass('btn ' + buttonClass + ' mx-1 page-btn')
    //                 .attr('data-page', i)
    //                 .text(i);
    //             $('#pagination').append(button);
    //         }
    //     }
    // }
    // function recreatePagination1(){

    //         $('#pagination').empty();
        
    // }

</script> -->

<style>
.pagination .btn {
    min-width: 40px;
    margin: 0 2px;
    transition: all 0.3s ease;
    font-weight: 500;
}

.btn-primary {
    background-color: #007bff !important;
    color: white !important;
    border-color: #007bff !important;
    box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
}

.btn-outline-primary {
    color: #007bff !important;
    border-color: #007bff !important;
    background-color: white !important;
}

.btn-outline-primary:hover {
    background-color: #f8f9fa !important;
    color: #0056b3 !important;
    border-color: #0056b3 !important;
    transform: translateY(-1px);
}

.btn-primary:hover {
    background-color: #0056b3 !important;
    border-color: #0056b3 !important;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 123, 255, 0.4);
}

.pagination {
    display: flex;
    gap: 5px;
    padding: 10px 0;
}
</style>

<div class="row" id="jobList">
    @Html.Partial("JobListPartial", listjob)

</div>

<div class="d-flex justify-content-center mt-4" style="margin-bottom:4px;">
    <div class="pagination" id="pagination"></div>
</div>

<script>
$(document).ready(function() {
    // Xóa toàn bộ nút phân trang cũ
    $('.pagination').empty();
    $('.pagination button').remove();
    initializePagination(@ViewBag.CurrentPage);

    // Xử lý sự kiện click cho nút phân trang
    $(document).off('click', '.page-btn').on('click', '.page-btn', function() {
        var page = $(this).data('page');
        loadJobs(page);
    });

    function initializePagination(currentPage) {
        var totalPages = @ViewBag.TotalPages;
        
        // Xóa triệt để phân trang cũ
        $('.pagination').empty();
        $('.pagination button').remove();
        $('#pagination').html('');
        
        if (totalPages === 1) {
            // Nếu chỉ có 1 trang, tạo 1 nút duy nhất
            let button = $('<button>')
                .attr('id', 'page-btn-1')
                .addClass('btn btn-primary mx-1 page-btn')
                .attr('data-page', 1)
                .text(1);
            $('#pagination').append(button);
        } 
        else if (totalPages > 1) {
            // Nếu có nhiều hơn 1 trang, tạo nhiều nút phân trang
            for(let i = 1; i <= totalPages; i++) {
                let buttonClass = i === parseInt(currentPage) ? 'btn-primary' : 'btn-outline-primary';
                let button = $('<button>')
                    .attr('id', 'page-btn-' + i)
                    .addClass('btn ' + buttonClass + ' mx-1 page-btn')
                    .attr('data-page', i)
                    .text(i);
                $('#pagination').append(button);
            }
        }
        else {
            // Nếu không có trang nào, ẩn phân trang
            $('#pagination').hide();
        }
    }

    function loadJobs(page) {
        $.ajax({
            url: '@Url.Action("GetListAttractiveJobInHome", "Home")',
            type: 'GET',
            data: { page: page },
            success: function(result) {
                $('#jobList').html(result);
                // Gọi lại hàm initializePagination với trang hiện tại
                initializePagination(page);
            },
            error: function(err) {
                console.error('Lỗi khi tải dữ liệu:', err);
            }
        });
    }
});
</script>