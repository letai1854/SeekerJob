@using SeekerJob.Controllers
 
<script>
             var domain = '@Request.Url.Scheme://@Request.Url.Host:@Request.Url.Port';

</script>
@{
    var tablemenus = ViewData["tablemenus"] as List<tablemenu>;
    var tablemenuparts = ViewData["tablemenuparts"] as List<tablemenupart>;
}
<div class="nav-animation header-nav navbar-collapse collapse d-flex justify-content-center">

    <ul class=" nav navbar-nav">
        @foreach (var item in tablemenus)
        {
    if (item.name != "anhdaidien")
                {
            if (item.name == "Trang chủ" && (item.hide ?? true))
            {
                <li class="has-mega-menu">
                    <a href="@item.link" style="font-weight: 700; color: white; background-color: #0d052a">@item.name</a>
                </li>
            }
            else
            {
                if (item.hide ?? true)
                {
                    <li class="has-child">
                        <a href="@item.link" style="font-weight: 700; color: white; background-color: #0d052a">@item.name</a>
                        @if (tablemenuparts.Any(p => p.idtable == item.id))
                        {
                            <ul class="sub-menu">
                                @foreach (var part in tablemenuparts.Where(p => p.idtable == item.id && (p.hide ?? true)))
                                {
                                    <li><a href="@part.meta">@part.name</a></li>
                                }
                            </ul>
                        }
                    </li>

                }
            }
                    
                }


        }
    </ul>
</div>
@using Newtonsoft.Json 
@{
    var menuItems = tablemenus
        .Where(item => item.name == "anhdaidien" && (item.hide ?? true))
        .Select(item => new
        {
            parts = tablemenuparts
                .Where(p => p.idtable == item.id && (p.hide ?? true))
                .Select(p => new
                {
                    href = p.link,
                    text = p.name
                })
                .ToList()
        })
        .Where(item => item.parts.Any())
        .SelectMany(item => item.parts)
        .ToList();

    var serializedMenuItems = JsonConvert.SerializeObject(menuItems);
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var menuToggle = document.getElementById("menuToggle");
        var subMenu = null;
        var timeoutId = null;

        var menuItems = @Html.Raw(serializedMenuItems);

        function createSubMenu() {
            var ul = document.createElement('ul');
            ul.className = 'sub-menu-child';

            menuItems.forEach(function (item) {
                var li = document.createElement('li');
                var a = document.createElement('a');
                a.href = item.href;
                a.textContent = item.text;
                li.appendChild(a);
                ul.appendChild(li);
            });

            return ul;
        }

        function showMenu() {
            if (timeoutId) {
                clearTimeout(timeoutId);
                timeoutId = null;
            }
            if (!subMenu) {
                subMenu = createSubMenu();
                menuToggle.appendChild(subMenu);
            }
            subMenu.style.display = 'block';
        }

        function hideMenu() {
            timeoutId = setTimeout(function () {
                if (subMenu) {
                    subMenu.style.display = 'none';
                }
            }, 300);
        }

        menuToggle.addEventListener("mouseenter", showMenu);
        menuToggle.addEventListener("mouseleave", hideMenu);

        menuToggle.addEventListener("mouseover", function (event) {
            if (event.target.closest('.sub-menu-child')) {
                showMenu();
            }
        });

        menuToggle.addEventListener("mouseout", function (event) {
            if (event.target.closest('.sub-menu-child')) {
                hideMenu();
            }
        });
    });
</script>

